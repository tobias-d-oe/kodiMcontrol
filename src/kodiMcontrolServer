#!/usr/bin/python

# imoprt required modules
import socket
import sys
import getopt
import xml.etree.ElementTree as ET
import telnetlib
import json
import traceback
import logging
import logging.handlers
import time
import requests
import chardet


reload(sys)
sys.setdefaultencoding('utf-8')

# Setup default variables
conf={}
conf['listenPort'] = 8085
conf['listenIP'] = '0.0.0.0'
conf['DEBUG'] = 0
conf['mctlDefFile'] = '/tmp/kodiMcontrolServer.xml'



def logmsg(msg,error=False):
    if error == False:
        logger.info(msg)
    else:
        logger.error(msg)


def debugmsg(msg):
    if conf['DEBUG'] == 1:
        print "DEBUG: - Kodi-Response - %s" % (time.time())
        print "----------"
        print msg
        print "----------"


def readConfig(configfile):
    try:
        with open(configfile) as configuration:
            for line in configuration:
                if line.strip().startswith('#') or len(line.strip()) < 1:
                    continue
                name, var = line.partition("=")[::2]
                name = name.strip()
                var = var.strip()
                if name == "listenPort" or name == "DEBUG":
                    conf[name] = int(var)
                else:
                    conf[name] = var
    except:
        logmsg("Configuration file could not be opened",True)
        sys.exit()


def getdeviceurl(root,name):
    element=root.find("./Devices/device[@name='%s']" % name)
    kodiIP=element.find('ip').text
    kodiPort=element.find('port').text
    url="http://%s:%s/jsonrpc" % (kodiIP,kodiPort)
    return url


def translateGetStates(root,cmdname):
    element=root.find("./GetStates/Command[@name='%s']" % cmdname)
    kodiType=element.find('type').text
    kodi=element.find('device').text
    kodiurl=getdeviceurl(definitions,kodi)
    kodiRes=''
    if kodiType == 'custom':
        kodiCmd=element.find('json').text
        kodiRes=element.find('result').text
    else:
        kodiCmd=element.find('state').text
    return kodiurl,kodiType,kodiCmd,kodiRes


def translateExecuteCommand(root,cmdname):
    try:
        element=root.find("./ExecuteCommand/Command[@name='%s']" % cmdname)
        kodiType=element.find('type').text
        kodi=element.find('device').text
        kodiurl=getdeviceurl(definitions,kodi)
        if kodiType == 'custom':
            kodiCmd=element.find('json').text
        else:
            kodiCmd=element.find('key').text
    except:
        commandbase=cmdname.split('.')
        commandvalue=commandbase[2]
        commandbase=commandbase[0]+'.'+commandbase[1]+'.*'
        element=root.find("./ExecuteCommand/Command[@name='%s']" % commandbase)
        kodi=element.find('device').text
        kodiType=element.find('type').text
        kodiurl=getdeviceurl(definitions,kodi)
        if kodiType == 'custom':
            kodiCmd=element.find('json').text
            kodiCmd=kodiCmd.replace('@',commandvalue)
        else: 
            kodiCmd=commandvalue
    return kodiurl,kodiCmd,kodiType 


def createmsgpack(message):
    XMLResponse='XML\n'
    xmllen=len(message)
    LEN="%08d" % (xmllen,)
    XMLResponse=XMLResponse+LEN+'\n'+message
    return XMLResponse


def msgprocess(message):
    debugmsg(message)
    tree = ET.fromstring(str(message))
    RequestType=tree[0].attrib['name']
    XMLResponse= '<?xml version="1.0"?>\n<mctrlmessage>\n<response>\n'
    if RequestType == 'ExecuteCommand':
        for child in tree[0]:
            url,kodicmd,koditype=translateExecuteCommand(definitions,child.attrib['value'])
            logmsg("Execute Command requested: %s" % (koditype))
            debugmsg(kodicmd)
            if koditype == "custom":  
                try:
                    execute_custom(url,kodicmd)
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            elif koditype == "executeaction":
                try:
                    execute_input_executeaction(url,kodicmd) 
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            elif koditype == "input":
                try:
                    execute_input(url,kodicmd)
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            elif koditype == "window":
                try:
                    execute_window(url,kodicmd)
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            elif koditype == "addon":
                try:
                    execute_addon(url,kodicmd)
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            elif koditype == "volume":
                try:
                    execute_volume(url,kodicmd)
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            elif koditype == "system":
                try:
                    execute_system(url,kodicmd)
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            elif koditype == "pvr":
                try:
                    execute_pvr(url)
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            elif koditype == "quit":
                try:
                    execute_quit(url)
                    kodiexec = "success"
                except:
                    kodiexec = "error"
            else:
                kodiexec = "not implemented"
            XMLResponse=XMLResponse+'<return name="status" value="'+kodiexec+'" />\n' 
    elif RequestType == 'GetStates':
        for child in tree[0]:
            name=child.attrib['name']
            kodiurl,koditype,kodiCmd,kodiRes = translateGetStates(definitions,child.attrib['value']) 
            logmsg("GetState Command requested: %s" % (koditype))
            try:
                if koditype == "custom":
                    kodistate = get_custom_state(kodiurl,kodiCmd,kodiRes)
                elif koditype == "internal":
                    kodistate = get_internal_state(kodiurl,kodiCmd)
            except:
                kodistate = 'error'
            XMLResponse=XMLResponse+'<return name="'+name+'" value="%s" />\n' % (kodistate)
    XMLResponse= XMLResponse + "</response>\n</mctrlmessage>\n"
    return createmsgpack(XMLResponse)


def get_internal_state(url,kodiCmd):
    if kodiCmd == 'volume':
        return str(getvolume(url))
    elif kodiCmd == 'muted':
        return getmuted(url)
    elif kodiCmd == 'player':
        return getplayertype(url)
    elif kodiCmd == 'pvrchannelname':
        return getpvrchannelname(url)
    elif kodiCmd == 'now_title':
        return getnow_title(url)
    elif kodiCmd == 'now_plot':
        restxt = getnow_plot(url)
        return restxt 
    elif kodiCmd == 'now_progress':
        return getnow_progress(url)
    elif kodiCmd == 'now_starttime':
        return getnow_starttime(url)
    elif kodiCmd == 'now_endtime':
        return getnow_endtime(url)
    elif kodiCmd == 'next_title':
        return getnext_title(url) 
    elif kodiCmd == 'next_plot':
        return getnext_plot(url)
    elif kodiCmd == 'next_starttime':
        return getnext_starttime(url)
    elif kodiCmd == 'next_endtime':
        return getnext_endtime(url)


def get_custom_state(url,kodiCmd,kodires):
    data = json.loads(kodiCmd)
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    kodires=kodires.split('/')
    resjson=json.loads(r.text)
    debugmsg(resjson)
    for i in kodires:
        resjson=resjson[i]
    response= str(resjson)
    return response


def getvolume(url):
    try:
        data = {'jsonrpc': '2.0', 'method': 'Application.GetProperties','params':{'properties':['volume']},'id':'1'}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        return resjson['result']['volume']
    except:
        return ''


def getmuted(url):
    try:
        data = {'jsonrpc': '2.0', 'method': 'Application.GetProperties','params':{'properties':['muted']},'id':'1'}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        return resjson['result']['muted']
    except:
        return ''


def getplayerid(url):
    try:
        data = {'jsonrpc': '2.0', 'method': 'Player.GetActivePlayers','id':'1'}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        return resjson['result'][0]['playerid']
    except:
        return ''


def getplayertype(url):
    try:
        data = {'jsonrpc': '2.0', 'method': 'Player.GetActivePlayers','id':'1'}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        return resjson['result'][0]['type']
    except:
        return ''


def getpvrchannelid(url):
    try:
        playerid = getplayerid(url)
        data = {'jsonrpc':'2.0','id':'1','method':'Player.GetItem','params':{'playerid': playerid}}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        return resjson['result']['item']['id']
    except:
        return ''


def getpvrchannelname(url):
    try:
        playerid = getplayerid(url)
        data = {'jsonrpc':'2.0','id':'1','method':'Player.GetItem','params':{'playerid': playerid}}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        return str(resjson['result']['item']['label']).strip()
    except:
        return ''


def getnow(url):
    try:
        channelid = getpvrchannelid(url)
        data = {'jsonrpc': '2.0','method': 'PVR.GetChannelDetails','params': {'channelid': channelid,'properties':['broadcastnow']},'id': 1}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        return resjson
    except:
        return ''


def getnow_title(url):
    try:
        resjson = getnow(url)
        debugmsg(resjson)
        return resjson['result']['channeldetails']['broadcastnow']['title']
    except:
        return ''


def getnow_plot(url):
    try:
        resjson = getnow(url)
        debugmsg(resjson)
        return resjson['result']['channeldetails']['broadcastnow']['plot']
    except:
        return ''


def getnow_progress(url):
    try:
        resjson = getnow(url)
        debugmsg(resjson)
        return int(resjson['result']['channeldetails']['broadcastnow']['progresspercentage'])
    except:
        return ''


def getnow_endtime(url):
    try:
        resjson = getnow(url)
        debugmsg(resjson)
        endtime=str(resjson['result']['channeldetails']['broadcastnow']['endtime']).split(' ')[1][:5]
        return endtime
    except:
        return ''


def getnow_starttime(url):
    try:
        resjson = getnow(url)
        debugmsg(resjson)
        starttime = str(resjson['result']['channeldetails']['broadcastnow']['starttime']).split(' ')[1][:5]
        return starttime
    except:
        return ''


def getnext(url):
    try:
        channelid = getpvrchannelid(url)
        data = {'jsonrpc': '2.0','method': 'PVR.GetChannelDetails','params': {'channelid': channelid,'properties':['broadcastnext']},'id': 1}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        return resjson
    except:
        return ''


def getnext_title(url):
    try:
        resjson = getnext(url)
        debugmsg(resjson)
        return resjson['result']['channeldetails']['broadcastnext']['title']
    except:
        return ''


def getnext_plot(url):
    try:
        resjson = getnext(url)
        debugmsg(resjson)
        return str(resjson['result']['channeldetails']['broadcastnext']['plot']).replace('(n)','')
    except:
        return ''


def getnext_endtime(url):
    try:
        resjson = getnext(url)
        debugmsg(resjson)
        return resjson['result']['channeldetails']['broadcastnext']['endtime']
    except:
        return ''


def getnext_starttime(url):
    try:
        resjson = getnext(url)
        debugmsg(resjson)
        return resjson['result']['channeldetails']['broadcastnext']['starttime']
    except:
        return ''


def execute_input_executeaction(url,key):
    possiblekeys = [ "left", "right", "up", "down", "pageup", "pagedown", "select", "highlight", "parentdir", "parentfolder",
                     "back", "menu", "previousmenu", "info", "pause", "stop", "skipnext", "skipprevious", "fullscreen", "aspectratio",
                     "stepforward", "stepback", "bigstepforward", "bigstepback", "chapterorbigstepforward", "chapterorbigstepback",
                     "osd", "showsubtitles", "nextsubtitle", "cyclesubtitle", "playerdebug", "codecinfo", "playerprocessinfo",
                     "nextpicture", "previouspicture", "zoomout", "zoomin", "playlist", "queue", "zoomnormal", "zoomlevel1",
                     "zoomlevel2", "zoomlevel3", "zoomlevel4", "zoomlevel5", "zoomlevel6", "zoomlevel7", "zoomlevel8", "zoomlevel9",
                     "nextcalibration", "resetcalibration", "analogmove", "analogmovex", "analogmovey", "rotate", "rotateccw", "close",
                     "subtitledelayminus", "subtitledelay", "subtitledelayplus", "audiodelayminus", "audiodelay", "audiodelayplus",
                     "subtitleshiftup", "subtitleshiftdown", "subtitlealign", "audionextlanguage", "verticalshiftup", "verticalshiftdown",
                     "nextresolution", "audiotoggledigital", "number0", "number1", "number2", "number3", "number4", "number5", "number6",
                     "number7", "number8", "number9", "smallstepback", "fastforward", "rewind", "play", "playpause", "switchplayer",
                     "delete", "copy", "move", "screenshot", "rename", "togglewatched", "scanitem", "reloadkeymaps", "volumeup", "volumedown",
                     "mute", "backspace", "scrollup", "scrolldown", "analogfastforward", "analogrewind", "moveitemup", "moveitemdown",
                     "contextmenu", "shift", "symbols", "cursorleft", "cursorright", "showtime", "analogseekforward", "analogseekback",
                     "showpreset", "nextpreset", "previouspreset", "lockpreset", "randompreset", "increasevisrating", "decreasevisrating",
                     "showvideomenu", "enter", "increaserating", "decreaserating", "setrating", "togglefullscreen", "nextscene", "previousscene",
                     "nextletter", "prevletter", "jumpsms2", "jumpsms3", "jumpsms4", "jumpsms5", "jumpsms6", "jumpsms7", "jumpsms8", "jumpsms9",
                     "filter", "filterclear", "filtersms2", "filtersms3", "filtersms4", "filtersms5", "filtersms6", "filtersms7", "filtersms8",
                     "filtersms9", "firstpage", "lastpage", "guiprofile", "red", "green", "yellow", "blue", "increasepar", "decreasepar",
                     "volampup", "volampdown", "volumeamplification", "createbookmark", "createepisodebookmark", "settingsreset",
                     "settingslevelchange", "stereomode", "nextstereomode", "previousstereomode", "togglestereomode", "stereomodetomono",
                     "channelup", "channeldown", "previouschannelgroup", "nextchannelgroup", "playpvr", "playpvrtv", "playpvrradio", "record",
                     "togglecommskip", "showtimerrule", "leftclick", "rightclick", "middleclick", "doubleclick", "longclick", "wheelup",
                     "wheeldown", "mousedrag", "mousemove", "tap", "longpress", "pangesture", "zoomgesture", "rotategesture", "swipeleft",
                     "swiperight", "swipeup", "swipedown", "error", "noop" ]
    if not key in possiblekeys:
        return "error"
    try:
        data = {'params': {'action': key}, 'jsonrpc': '2.0', 'method': 'Input.ExecuteAction', 'id': '1'}
        headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
        r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
        resjson=json.loads(r.text)
        debugmsg(resjson)
        result=resjson['result']
        if result == 'OK':
            return "success"
        else:
            return "error"
    except:
        return 'error'


def execute_system(url,key):
    possiblekeys = [ "EjectOpticalDrive", "Hibernate", "Reboot", "Shutdown", "Suspend" ]
    if not key in possiblekeys:
        return "error"
    key = "System.%s" % key 
    data = { 'jsonrpc': '2.0', 'method': key, 'id': '1'}
    debugmsg(data)
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    resjson=json.loads(r.text)
    debugmsg(resjson)
    result=resjson['result']
    if result == 'OK':
        return "success"
    else:
        return "error"


def execute_input(url,key):
    possiblekeys = [ "Back","ContextMenu","Down","Home","Info","Left","Right","Select","ShowCodec","ShowOSD","ShowPlayerProcessInfo","Up" ]
    if not key in possiblekeys:
        return "error"
    key = "Input.%s" % key 
    data = { 'jsonrpc': '2.0', 'method': key, 'id': '1'}
    debugmsg(data)
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    resjson=json.loads(r.text)
    debugmsg(resjson)
    result=resjson['result']
    if result == 'OK':
        return "success"
    else:
        return "error"


def execute_window(url,key):
    possiblekeys = [ "home", "programs", "pictures", "filemanager", "settings", "music", "videos", "tvchannels", "tvrecordings", "tvguide",
                     "tvtimers", "tvsearch", "radiochannels", "radiorecordings", "radioguide", "radiotimers", "radiosearch", "gamecontrollers",
                     "pvrguideinfo", "pvrrecordinginfo", "pvrradiordsinfo", "pvrtimersetting", "pvrgroupmanager", "pvrchannelmanager",
                     "pvrguidesearch", "pvrchannelscan", "pvrupdateprogress", "pvrosdchannels", "pvrosdguide", "pvrosdteletext", "systeminfo",
                     "testpattern", "screencalibration", "systemsettings", "servicesettings", "pvrsettings", "playersettings", "mediasettings",
                     "interfacesettings", "appearancesettings", "videoplaylist", "loginscreen", "profiles", "skinsettings", "addonbrowser", 
                     "yesnodialog", "progressdialog", "virtualkeyboard", "volumebar", "submenu", "favourites", "contextmenu", "notification",
                     "numericinput", "gamepadinput", "shutdownmenu", "playercontrols", "playerprocessinfo", "seekbar", "musicosd", "addonsettings",
                     "visualisationpresetlist", "osdcmssettings", "osdvideosettings", "osdaudiosettings", "audiodspmanager", "osdaudiodspsettings",
                     "videobookmarks", "filebrowser", "networksetup", "mediasource", "profilesettings", "locksettings", "contentsettings",
                     "songinformation", "smartplaylisteditor", "smartplaylistrule", "busydialog", "pictureinfo", "accesspoints", "fullscreeninfo",
                     "sliderdialog", "addoninformation", "subtitlesearch", "musicplaylist", "musicplaylisteditor", "teletext", "selectdialog",
                     "musicinformation", "okdialog", "movieinformation", "textviewer", "fullscreenvideo", "fullscreenlivetv", "fullscreenradio",
                     "visualisation", "slideshow", "weather", "screensaver", "videoosd", "videomenu", "videotimeseek", "startwindow", "startup",
                     "peripheralsettings", "extendedprogressdialog", "mediafilter", "addon", "eventlog", "tvtimerrules", "radiotimerrules" ]
    if not key in possiblekeys:
        return "error"
    data = { 'jsonrpc': '2.0', 'method': 'GUI.ActivateWindow', 'id': '1', 'params':{'window':key}}
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    resjson=json.loads(r.text)
    debugmsg(resjson)
    result=resjson['result']
    if result == 'OK':
        return "success"
    else:
        return "error"


def execute_pvr(url):
    data = { 'jsonrpc': '2.0', 'method': 'PVR.Record', 'params':{'record':'toggle', 'channelid':'current'}, 'id': 1 }
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    resjson=json.loads(r.text)
    debugmsg(resjson)
    return resjson
    result=resjson['result']
    if result == 'OK':
        return "success"
    else:
        return "error"


def execute_quit(url):
    data = { 'jsonrpc': '2.0', 'method': 'Application.Quit', 'id': 1 }
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    resjson=json.loads(r.text)
    debugmsg(resjson)
    return resjson
    result=resjson['result']
    if result == 'OK':
        return "success"
    else:
        return "error"


def execute_addon(url,addonid):
    data = { 'jsonrpc': '2.0', 'method': 'Addons.ExecuteAddon', 'params':{'addonid':addonid}, 'id': 1 }
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    resjson=json.loads(r.text)
    debugmsg(resjson)
    return resjson
    result=resjson['result']
    if result == 'OK':
        return "success"
    else:
        return "error"


def execute_custom(url,api):
    data = api
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    resjson=json.loads(r.text)
    debugmsg(resjson)
    return resjson
    result=resjson['result']
    if result == 'OK':
        return "success"
    else:
        return "error"


def execute_volume(url,key):
    if key == "mute":
        data = { 'jsonrpc': '2.0', 'method': 'Application.SetMute', 'params': { 'mute': 'toggle' }, 'id': 1 }
    else:
        data = { 'jsonrpc': '2.0', 'method': 'Application.SetVolume', 'params': { 'volume': int(key) }, 'id': 1 }

    debugmsg(data)
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    r = requests.post(url, data=json.dumps(data), headers=headers, timeout=3)
    resjson=json.loads(r.text)
    debugmsg(resjson)
    result=resjson['result']
    if result == 'OK':
        return "success"
    else:
        return "error"


def usage():
    usagemsg="""
kodiMcontrolServer v. 0.1 -  mediola gateway for kodi  - (c) Tobias D. Oestreicher
----------------------------------------------------------------------------------
Usage:
  kodiMcontrolServer [options]

Options:
  -c <configfile>       : define the configurationfile for the daemon
  -d                    : enable debug output to stdout
  -h                    : shows this helpmessage

Example:
  kodiMcontrolServer -c /etc/kodiMcontrol/kodiMcontrol.cfg
---------------------------------------------------------------------------------
"""
    return usagemsg







# setup logging to syslog
logger = logging.getLogger('kodiMcontrolLogger')
logger.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(address = '/dev/log')
logformat = logging.Formatter('kodiMcontrol: %(message)s')
handler.setFormatter(logformat)
logger.addHandler(handler)


# parse commandline arguments
configfile=''
myopts, args = getopt.getopt(sys.argv[1:],"c:hd")


for o, a in myopts:
    if o == '-c':
        configfile=a
    elif o == '-d':
        conf['DEBUG']=1
    else:
        print(usage())
        sys.exit()

# read settings from configfile
if configfile:
    readConfig(configfile)


# read definition file
deftree = ET.parse(conf['mctlDefFile'])
definitions = deftree.getroot()

# create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = (conf['listenIP'], conf['listenPort'])
logmsg("Starting up on %s with port %s" % server_address)
sock.bind(server_address)

try:
    sock.listen(1)
    
    while True:
        logmsg("Wait for connection")
        connection, client_address = sock.accept()
        try:
            logmsg("Connection from %s" % str(connection.getpeername()[0]))
            recdata=''
            mcontrolheader = connection.recv(15)
            mcontrollen = int(connection.recv(9))+1
            recdata = connection.recv(int(mcontrollen))
            responsestr=msgprocess(recdata)
            debugmsg(responsestr)
            connection.sendall(responsestr)
            logmsg("Responding Client %s" % str(connection.getpeername()[0]))    
        finally:
            connection.close()
except KeyboardInterrupt:
    logmsg("Shutting down kodiMcontrol Server")
except Exception:
    traceback.print_exc(file=sys.stdout)
sys.exit(0)
